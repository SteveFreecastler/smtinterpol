A proof is represented as a DAG, where the inner nodes are mainly
resolution application (there is also an instantiation rule) and the
leafs are input formulas or tautologies.  The syntax for proofs is
very similar to SMT-LIB terms.  In particular a proof may use let
expression to bind common subexpressions (subterms or proofs) to
variables.  Most proof rules could be represented by application
terms.  However, the instantiation rule needs higher order constructs
and the forall+-/exists+- rule also don't follow the term syntax.

Every proof proves a clause, which is a set of literals, i.e., a set
of positive or negated atoms.  Each atom is a boolean SMT-LIB term.  A
clause is written as `t1, ~t2, t3`, where the ~ indicates that the
literal is negative.  Since a clause is a set, the clauses `t1,t1,t2`
and `t2,t1` are identical.  A proof returned by (get-proof) is correct
if it proves the empty clause.

Note that `~t` is a negative literal but `(not t)` is a positive
literal for the atom `(not t)`.  One has to use resolution and the
not+/not- axioms to "transform" one into the other.

For computing the clauses, we consider two terms as equal if their DAG
representation after unfolding all lets is syntactically equal.
Equality of terms is important for the resolution rule, to ensure that
the intended literal is removed from the clause.

REMARKS: Even though this proof format looks very simple, it trivially
supports extended resolution, since the atoms used in the resolution
rule can be arbitrary terms like `(and p1 p2)`.  Thus even DRAT proofs
can be efficiently expressed in this format [1].

The instantiate rule can also be used to support custom rules without
proving them over and over, by proving the general case using
variables.


Proof ::= (let ((....)) Proof)
        | (res Term Proof Proof)
	| (instantiate ((Var Term) ... (Var Term)) Proof)
	| (assert Term)
	| false- | true+
	| (not+ Term)
	| (not- Term)
	| (or+ NUM Term ... Term)
	| (or- Term ... Term)
	| (and+ Term ... Term)
	| (and- NUM Term ... Term)
	| (=>+ NUM Term ... Term)
	| (=>- Term ... Term)
	| (=+1 Term Term)
	| (=+2 Term Term)
	| (=-1 Term Term)
	| (=-2 Term Term)
	| (xor+ (Term ... Term) (Term ...Term) (Term ... Term))
	| (xor- (Term ... Term) (Term ...Term) (Term ... Term))
	| (forall+ VarDecl Term)
	| (forall- VarDecl Term)
	| (exists+ VarDecl Term)
	| (exists- VarDecl Term)
	| (distinct+ Term ... Term)
	| (distinct- Term ... Term)
	| (=+ Term ... Term)
	| (=- Term ... Term)
	| (ite1 Term Term Term)
	| (ite2 Term Term Term)
	| (trans Term ... Term)
	| (symm Term Term)
	| (cong Symbol Term Term ... Term Term)
	| (expand Term)
	| (del! Term)

Special Skolem Variables: (_ skolem NUM VarDecl Term)

================

Terms, Literal, Clause

A Term is an SMT-LIB term, the sort can be annotated in brackets, e.g.
with Term[bool] we describe the type off all SMT-LIB terms with sort Bool.

A Literal is either a positive or a negative SMT-LIB term of sort Bool:

Literal ::= Pos(Term[bool]) | Neg(Term[bool])
    where Pos(t) is written as t  and  Neg(t) is written as ~t.

A Clause is a set of literals, where {lit1,lit2} is written as lit1,lit2

Rules:

The core of the proof format is the resolution rule.  There is a second
rule, the instantiation rule.  All other rules are axioms proving a
simple tautology.

Resolution-Rule:

(res t C1 C2):
      C1        C2
      ------------
       C1\t, C2\~t

The resolution rule takes as argument a pivot Term and two sub proofs.
It returns the proof for a new clause which is the result of the resolution.
Note that C1 needs to contain the positive literal for t, C2 contains the
neegative literal for t.

Instantiation-Rule:

(instantiate ((x1 t1) ... (xn tn)) C):
        C
      ----------------------------
      (let ((x1 t1)... (xn tn)) C)

where x1,...,xn are the free variables in the terms in C and
the let is applied on every term of the literals of C.

Here the C argument is a sub-proof for clause C and the Inst function returns
the proof of the resulting instantiated clause.x


Axioms:
Axioms don't take subproofs as arguments and create a new tautology
clause (except for assert, which creates a clause corresponding to one
of the input formulas).

(assert t):         t
false-:             ~false
true+:              true
(or+ k t1 ... tn):  (or t1 ... tn), ~tk
(or- t1 ... tn):    ~(or t1 ... tn), t1, ..., tn
(not+ t):           (not t), t
(not- t):           ~(not t), ~t
(and+ t1 ... tn):   (and t1 ... tn), ~t1, ..., ~tn
(and- k t1 ... tn): ~(and t1 ... tn), tk
(=>+ k t1 ... tn): (=> t1 ... tn), ~? tk   (negated literal iff k == n)
(=>- t1 ... tn):   ~(=> t1 ... tn), ~t1, ..., ~tn-1, tn
(=+1 t1 t2):       (= e1 e2), e1, e2
(=+2 t1 t2):       (= e1 e2), ~e1, ~e2
(=-1 t1 t2):       ~(= e1 e2), e1, ~e2
(=-2 t1 t2):       ~(= e1 e2), ~e1, e2

XOR-Reasoning (TODO: this is just a first draft)
(xor+ seq0 seq1 seq2): (xor seq0), (xor seq1), ~(xor seq2)
(xor- seq0 seq1 seq2): ~(xor seq0), ~(xor seq1), ~(xor seq2)
  where seq0, seq1, seq2 are non-empty sequences of terms and for
  each term the total number of occurrences in seq0, seq1, and seq2
  is even.
  Moreover, if seqi = (t) contains only one element, the clause contains
  the literal "t" instead of the syntactically incorrect "(xor t)".

(forall+ F):  (forall ((x1 tau1) ... (xn taun)) F),
              ~(let ((x1 ((_ skolem 1 (...) F) y)) ...
	             (xn ((_ skolem n (...) F) y)))
		    F)
(forall- F):  ~(forall ((x1 tau1) ... (xn taun)) F), F
(exists+ F):  (exists ((x1 tau1) ... (xn taun)) F), ~F
(exists- F):  ~(exists ((x1 tau1) ... (xn taun)) F),
              (let ((x1 ((_ skolem 1 (...) F) y)) ...
	            (xn ((_ skolem n (...) F) y)))
		   F)

    where (skolem_Fi y) is the application of a fresh function symbol
    to the free variables y1,...,ym of the input formula
    (not including x1,...,xn which are bound in the input formula).

(distinct+ t1 ... tn): (distinct t1 ... tn), (= t1 t2), (= t1 t3) ..., (= tn-1 tn)  (for all i, j, i<j)
(distinct- i j t1 ... tn): ~(distinct t1 ... tn), ~(= ti tj)
   where i != j,  i,j in 1...n
(=+ t1 ... tn): (= t1 ... tn), ~(= t1 t2), ... ~(= tn-1 tn)
(=- i j t1 ... tn): ~(= t1 ... tn), (= ti tj)

(ite1 c t e):       (= (ite c t e) t), ~c
(ite2 c t e):       (= (ite c t e) e), c

(del! (! t :annot)) (= (! t :annot) t)

(trans a1 ... an):  (= a1 an), ~(= a1 a2), ..., ~(= an-1 an
Remark:  (trans a1) is the reflexivity axiom: (= a1 a1)

(symm a1 a2):       (= a1 a2), ~(= a2 a1)
(cong f a1 b1 ... an bn):
        (= (f a1 ... an) (f b1 .. bn)), ~(= a1 b1), ..., ~(= an bn)

Cong works with every function, even logical operators.

Alternatively, one could support a more powerful substitution rule,
e.g.:

(subst pattern t1 t1' .. tn tn'):
   (= (let ((x1 t1) ... (xn tn)) pattern)
      (let ((x1 t1') ... (xn tn')) pattern),  ~(= t1 t1'), ... ~(= tn tn')
Remark:
  (refl a) = (subst a)
  (symm a b) = (res (= (= a a) (= a b))
                    (subst (= a x1) b a)
                    (res (= a a) (refl a) (=-2 (= a a) (= a b))))
  (trans a b c) = (res (= (= a b) (= a c))
                       (subst (= a x1) b c)
		       (=-2 (= a b) (= a c)))
  (trans a b c d) = (res (= a c) (trans a b c) (trans a c d))

The above rule can also rewrite terms over multiple levels over exists/forall.


(expand (f t1 ... tn)): (= (f t1 ... tn) (let ((x1 t1) ... (xn tn)) t))
  where f is defined by (define-fun f ((x1 tau1) ... (xn taun)) t)


Arrays:

(selectstore1 a i v):   (= (select (store a i v) i) v)
(selectstore2 a i j v): (= (select (store a i v) j) (select a j)), (= i j)
(extdiff a b):  (= a b), ~(= (select a (@diff a b)) (select b (@diff a b)))

DT:

(dt_project seli a1 ... an): (= (seli (cons a1 ... an)) ai)
(dt_cons cons x): ~((_ is cons) x), (= (cons (sel1 x) ... (seln x)) x)
(dt_test cons (cons a1 ... an)):   ((_ is cons) (cons a1 ... an))
(dt_test cons' (cons a1 ... an)): ~((_ is cons') (cons a1 ... an))
(dt_exhaust x): ((_ is cons1) x), ..., ((_ is consn) x)
(dt_acyclic (cons ... x ...)):  ~(= (cons ... x ...) x)
   where (cons ... x ...) is a term dag containing term x and on the path
   from the root to x only constructor functions appear.
(dt_match (match ..)): (= (match t ((p1 x1) c1) ...)
           (ite ((_ is p1) t) (let (x1 (sel1 t)) c1)
	     ...))

Arithmetic:

TODO:
  chainable <=, <
  associative commutative built-in operators (+/*) and
  their normalization?
  Lots >=, > rewrite to <=, < (or rules)
  Can we use Farkas and Tricho for everything?

  Here (poly p) is some normalization of a polynomial expression:
  (+ (* c1 t11 ...t1m) ... (* cn tn1 ... tnm))
  where c1, .., cn are non-zero constants,
  all (ti1...tim) are different sets, the head symbol of tij is not +,-,*.
  ci is omitted, if it is 1 (except if there is no ti1...tin).
  */+ is omitted if it has only one argument.
  For linear arithmetic m must be one or zero.

(ToIntLow x):       (<= (- (to_int x) x) 0)
(ToIntHigh x):      (<  (- x (to_int x) 1) 0)
(DivLow d x):       (<= (- (* d (div x d)) x) 0), (= d 0)
(DivHigh d x):      (< (- x (* d (div x d)) d) 0), (= d 0)

(mod d x):          (= (+ (* d (div x d)) (mod x d)) x), (= d 0)
(divisible d x):    (= ((_ divisible d) x) (= x (* d (div x d))))

(Tricho e):  (< e 0), (= e 0), (< (poly -e) 0)
(EqNeq):     ~(= e 0), (<= e 0)
(EqSimp c e1 e2):   (= (= (poly c*(e1-e2)) 0) (= e1 e2))
(NegIneq2 e): (<= e 0), ~(< (poly -e) 0)
(NegIneqI e): (< e 0), ~(< (poly -e + 1)) 0)

(Farkas c1 p1 ... cn pn):  (<=? p1 0), ..., (<=? pn n)
   iff c1, ..., cn positive rationals (algebraic numbers?)
       p1, ..., pn are polynomials over the same arithmetic sort.
    and poly(c1*p1 + ... + cn*pn)=c <= 0
    and c either < 0 or at least one non-strict inequality.
    if some pi are Int and some are Real, the Int ones are
    replaced by (to_real pi).

Poly+:  (= (poly p1+p2) (+ (poly p1) (poly p2)))
Poly-:  (= (poly p1-p2) (- (poly p1) (poly p2)))
Poly-:  (= (poly -p1) (- (poly p1)))
Poly*:  (= (poly p1*p2) (* (poly p1) (poly p2)))
Poly/:  (= (poly 1/c *p) (/ (poly p) c))  (linear)
PolyToReal:  (= (poly (to_real p)) (to_real (polyI p)))
   where (poly (to_real p)) replaces each tij in p with (to_real tij).





[1] B. Kiesl, A. Rebola-Pardo, M. Heule, Extended Resolution Simulates DRAT,
    IJCAR 2018, https://www.cs.cmu.edu/~mheule/publications/ijcar18.pdf
